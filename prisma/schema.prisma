// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  email      String      @unique
  password   String
  role       UserRole
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  campaigns  campaigns[]
}

enum UserRole {
  ADMIN
  KOL_MANAGER
  BRAND
}

model kols {
  id                 Int            @id @default(autoincrement())
  name               String
  niche              NicheType
  followers          BigInt         @db.BigInt
  engagement_rate    Float
  reach              Int
  rate_card          BigInt         @db.BigInt
  audience_male      Int
  audience_female    Int
  audience_age_range AgeRangeType
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  campaign_kols      campaign_kol[]
  kol_reports        kol_reports[]
}

enum GenderType {
  MALE
  FEMALE
}

enum NicheType {
  FASHION
  BEAUTY
  TECH
  PARENTING
  LIFESTYLE
  FOOD
  HEALTH
  EDUCATION
  FINANCIAL
}

enum AgeRangeType {
  AGE_13_17
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_PLUS
}

model kol_types {
  id            Int     @id @default(autoincrement())
  name          String
  min_followers BigInt  @db.BigInt
  max_followers BigInt? @db.BigInt

  campaigns campaigns[]
}

model campaigns {
  id                Int          @id @default(autoincrement())
  user_id           Int
  name              String
  kol_type_id       Int
  target_niche      NicheType
  budget            BigInt
  target_engagement Float
  target_reach      Int
  target_gender     GenderType
  target_gender_min Int
  target_age_range  AgeRangeType
  start_date        DateTime
  end_date          DateTime
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  user          users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  kol_types     kol_types      @relation(fields: [kol_type_id], references: [id])
  campaign_kols campaign_kol[]
  kol_reports   kol_reports[]
}

model campaign_kol {
  id          Int      @id @default(autoincrement())
  campaign_id Int
  kol_id      Int
  created_at  DateTime @default(now())

  campaign campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  kol      kols      @relation(fields: [kol_id], references: [id], onDelete: Cascade)

  @@unique([campaign_id, kol_id])
}

model kol_reports {
  id            Int      @id @default(autoincrement())
  campaign_id   Int
  kol_id        Int
  like_count    BigInt   @db.BigInt
  comment_count BigInt   @db.BigInt
  share_count   BigInt   @db.BigInt
  save_count    BigInt   @db.BigInt
  engagement    Float
  reach         Int
  cost          BigInt
  er            Float // Engagement Rate
  cpe           Float // Cost Per Engagement
  final_score   Float?
  ranking       Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  campaign campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  kol      kols      @relation(fields: [kol_id], references: [id], onDelete: Cascade)

  @@unique([campaign_id, kol_id])
}
